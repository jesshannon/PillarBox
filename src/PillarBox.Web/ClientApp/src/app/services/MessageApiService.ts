
// Autogenerated from Controller definitions using TypeWriter Visual Studio Plugin 

// $Classes/Enums/Interfaces(filter)[template][separator]
// filter (optional): Matches the name or full name of the current item. * = match any, wrap in [] to match attributes or prefix with : to match interfaces or base classes.
// template: The template to repeat for each matched item
// separator (optional): A separator template that is placed between all templates e.g. $Properties[public $name: $Type][, ]

// More info: http://frhagn.github.io/Typewriter/

import {Injectable} from '@angular/core';
import {Http, Response, Headers, RequestOptions, RequestOptionsArgs} from '@angular/http';
import {Observable} from 'rxjs/Observable';


import { MessageDetailsModel } from '../models/MessageDetailsModel.model';

@Injectable()
export class MessageApiService {
    constructor(private _http: Http) { }
    
    
    public get = (id: string) : Observable<MessageDetailsModel> => {
        return this._http.request(`/api/Message/get?id=${encodeURIComponent(id)}`, new RequestOptions({
            method: 'get',
            body: JSON.stringify(null)
        })).map(res => (<MessageDetailsModel>res.json()));
    }
    
    public delete = (id: string) : Observable<string> => {
        return this._http.request(`/api/Message/delete?id=${encodeURIComponent(id)}`, new RequestOptions({
            method: 'delete',
            body: JSON.stringify(null)
        })).map(res => (<string>res.json()));
    }
}